syntax = "proto2";

package setting;

// ----- common setting parameter -----
message Common {
  enum Mode {
    NO_TRAJECTORY = 0; // integration with only rgbd
    TRAJECTORY = 1; //  integration with rgbd and given camera trajectory
  }
  optional bool debug = 1 [default = false]; // debug mode can visualize the running process
  optional bool extract_mesh = 2 [default = true]; // extract mesh or not
  optional bool extract_pcd = 3 [default = false]; // extract point cloud or not
  optional Mode mode = 4 [default = NO_TRAJECTORY];
}

// ----- input and output path -----
message IO {
  //  helps for saving results (don't need to change)
  message StaticIO {
    message Fragment {
      optional string folder = 1 [default = 'fragments/'];
      optional string pcd = 2 [default = 'fragment_%03d.ply'];
      optional string posegraph = 3 [default = 'posegraph_%03d.json'];
      optional string posegraph_optimized = 4 [default = 'posegraph_optimized_%03d.json'];
    }

    message Scene {
      optional string folder = 1 [default = 'scene/'];
      optional string mesh = 2 [default = 'scene.ply'];
      optional string posegraph = 3 [default = 'posegraph.json'];
      optional string posegraph_optimized = 4 [default = 'posegraph_optimized.json'];
      optional string refined_posegraph = 5 [default = 'posegraph_refined.json'];
      optional string refined_optimized_posegraph = 6 [default = 'posegraph_refined_optimized.json'];
    }

    optional string setting_file = 1 [default = 'setting.txt']; // output setting file name
    optional Fragment fragment = 2;
    optional Scene scene = 3;
  }

  // input
  required string color_path = 1; // input color image
  required string depth_path = 2; // input depth image
  optional string intrinsic_path = 3;  // camera intrinsic parameters file, default (blank) : using open3d's default camera
  optional string trajectory_path = 4; // camera pose for input RGBD frames
  optional string meta_path = 11; // camera pose for input RGBD frames
  optional string confidence_path = 12; // camera pose for input RGBD frames

  // output
  optional string save_folder = 5 [default = './result/']; // folder to save output integration result
  optional string mesh_filename = 6 [default = 'mesh.ply']; // output mesh file name
  optional string pcd_filename = 7 [default = 'point_cloud.ply']; // output point cloud file name
  optional string intrinsic = 8 [default = 'intrinsic.json']; // output camera intrinsic file
  optional string trajectory = 9 [default = 'trajectory.log']; // output estimated camera poses
  optional StaticIO static_io = 10;
}

message AlgParams {
  message DepthThresh {
    optional float max = 1 [default = 3.0]; // maximum depth allowed from input RGBD frames
    optional float min = 2 [default = 0.2]; // minimum depth allowed from input RGBD frames
    optional float diff = 3 [default = 0.07]; // maximum depth difference to be considered as correspondence
  }

  message Frames {
    optional uint32 batch_size = 1 [default = 100]; // divide input frames into batches
    optional uint32 key_step = 2 [default = 5]; // set frames as keyframes with a step size
  }

  message Optimization {
    optional float max_correspond_dist = 1 [default = 0.07]; // the correspondence threshold
    optional float pref_loop_closure_odometry = 2 [default = 0.1]; // odometry case
    optional float pref_loop_closure_register = 3 [default = 4.0]; // loop-closure case
  }

  message Integration {
    optional float sdf_trunc = 1 [default = 0.08]; // truncation value for signed distance function
    optional float volume_len = 2 [default = 4.0]; // volume length of TSDF cubic space
    // a single voxel size for TSDF volume
    optional float voxel_len_coarse = 3 [default = 0.1]; // voxel length for integration with optimized poses
    optional float voxel_len_fine = 4 [default = 5.0]; // voxel size for integration with initial estimated poses
  }

  message Filter {
    optional uint32 level = 1 [default = 1];
    optional float delta_thresh = 2 [default = 0.05];
  }

  enum GlobalRegistration {
    RANSAC = 0;
    FPFH = 1;
  }

  enum ICPMethod {
    POINT2POINT = 0;
    POINT2PLANE = 1;
    COLOR = 2;
  }

  optional GlobalRegistration global_registration = 1 [default = RANSAC];
  optional ICPMethod icp_method = 2 [default = COLOR];
  optional DepthThresh depth_thresh = 3;
  optional Frames frames = 4;
  optional Optimization optimization = 5;
  optional Integration integration = 6;
  optional bool parallel = 7 [default = true]; // python multiprocessing
  optional uint32 cpu_num = 8 [default = 8]; // python multiprocessing
  optional Filter filter = 9;
  optional uint32 step = 10 [default = 1];
}

message Setting {
  optional Common common = 1;
  optional IO io = 2;
  optional AlgParams parameters = 3;
}